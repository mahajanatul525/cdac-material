/*1)Create a base class Storage_Device. Declare pure virtual function “void save()” in it. 			
Define following sub classes for this class.                       A) PenDrive  b) CD  c) HD		                                       	
	Define a global function “perform” which will accept “Storage_Device’s reference as an argument. Inside this method u will check , if  “Storage_Device” contains “HD”, then only u will call “save()” method. 
( RTTI).
				From main function , try calling display function by passing all the child instances one by one.

#include<iostream>
using namespace std;
class Storage_Device
{
public: virtual void save()=0;
};
class PD:public Storage_Device
{
public:
	void save()
	{
		cout<<"in save of pendrive\n"<<endl;
	}
};
class CD:public Storage_Device
{
public:
	void save()
	{
		cout<<"in save of CD\n"<<endl;
	}
};
class HD:public Storage_Device
{
public:
	void save()
	{
		cout<<"in save of HD\n"<<endl;
	}
};
void perform(Storage_Device &ref)
{
	try
	{
		dynamic_cast<HD&>(ref);
		ref.save();

	}
	catch(bad_cast &b)
	{
		cout<<b.what()<<endl;
	}

}
void main()
{
	PD p;
	CD c;
	HD h;
	perform(p);
	perform(c);
	perform(h);
	getchar();
}



*/