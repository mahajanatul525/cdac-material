#include<iostream>
using namespace std;

class storage
{
public:
	virtual void save()=0;
};

class pendrive:public storage
{
public:
	void save()
	{
			cout<<"inside pendrive";
	}
};
class cd:public storage
{
public:
	void save()
	{
			cout<<"inside cd";
	}
};
class hd:public storage
{
public:
	void save()
	{
			cout<<"inside hd";
	}
};

void perform(storage &ref )
{
		try
		{
			dynamic_cast<hd&>(ref);
			ref.save();
		}
		catch(bad_cast &p)
		{
				cout<<p.what();
		}
}
void main()
{
		pendrive p;
		cd c;
		hd h;
		perform(p);
		perform(c);
		perform(h);

		getchar();
}

----------------------------------------------------------------------------------------------------------------------------------------------------
/*)Create a base class Advertisement. Declare pure virtual function “void publish()” in it. 			
Define following sub classes for this class.                       			A) TV  b) Banner  c) NewsPaper		                                       	
	in main function, create an array of pointer to "Advertisement" and store addresses of all the child classes.
now traverse through the array and check using dynamic cast , if array contains "Banner" , then only invoke "publish()" .( RTTI).
*/
#include<iostream>
 using namespace std;

 class adv
 {
 public:
	 virtual void publish()=0;
 };

 class tv:public adv
 {
 public:

	 void publish()
	 {
			cout<<"inside publish"<<endl;
	 }
 };

 class news: public adv
 {
 public:
	 void publish()
	 {
			cout<<"inside news"<<endl;
	 }
 };
 class banner:public adv
 {
 public:
	 void publish()
	 {
			cout<<"inside banner";
	 }
 };

 void main()
 {
		adv *arr[3];

		arr[0]=new tv;
		arr[1]=new news;
		arr[2]=new banner;

		for(int i=0;i<3;i++)
		{
			if(dynamic_cast<banner*>(arr[i]))
			{
				arr[i]->publish();
			}
			else
			{
				cout<<"not in banner";
			}
		}

		getchar();
 }
					
---------------------------------------------------------------------------------------------------------					
/* Define a class "Player" with following members
	int id;
	char *name;
	char *country
	int score


	in the main function, u should be able to say

	
	Player p1(1,"sachin","india",200);

	cout<<p1<<endl;

	p1.disp();

	Player p2=p1;
	
	cout<<p2<<endl;

	Player p3;

	p3=p1;

*/
#include<iostream>
//#include<string.h>
 using namespace std;

 class player
 {
	int id;
	char *name;
	char *country;
	int score;
 public:
	 player ()
	 {
		 name=NULL;
		 country=NULL;
	 }
	 player (int p, char*a, char*b, int q )
	 {
		 id=p;
		 name=new char[strlen(a)+1];
		 strcpy(name,a);
		 country=new char[strlen(b)+1];
		 strcpy(country,b);
		 score=q;
		 
	 }
	 
	 void disp()
	 {
		 cout<<id<<name<<country<<score;

	 }
	 friend ostream& operator<<(ostream& ,player& );
	 
	 void operator=(player& p)
	 {
		id=p.id;
		 name=new char[strlen(p.name)+1];
		 strcpy(name,p.name);
		 country=new char[strlen(p.country)+1];
		 strcpy(country,p.country);
		 score=p.score; 
	 }
	 ~player()
	 {
		 if(name!=NULL && country!=NULL)
			 delete []name;
			delete[]country;

	 }

 };
 ostream& operator<<(ostream& o,player& p)
 {
		return o<<p.id<<p.name<<p.country<<p.score;
 }
 


 void main()
 {
		player p1(1,"rahul","india",200);
	
		p1.disp();
		player p2=p1;
		cout<<p2<<endl;
		p2.disp();
		player p3;
		p3=p1;
		p3.disp();
		getchar();
 }

		


