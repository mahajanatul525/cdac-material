// when object is passed as an argument ,and collected in 
another temporary object

#include<iostream>
#include<string.h>
using namespace std;
class MyClass
{
	private:
		int num;
	public:
		void disp()
		{
			cout<<num<<endl;
		}
		MyClass(int num)
		{
			this->num=num;
			cout<<"in one param const"<<endl;
		}
		~MyClass()
		{
			cout<<"in MyClass dest\t"<<num<<endl;
		}
		MyClass(MyClass &ref)
		{
			cout<<"in copy constr"<<endl;
			num=ref.num;
		}
};
void fun(MyClass ref)
{
	ref.disp();
}
void main()
{
	MyClass m1(100);
	m1.disp();
	fun(m1);
}











