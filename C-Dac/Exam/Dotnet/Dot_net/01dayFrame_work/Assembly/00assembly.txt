Microsoft .Net Assembly 

Microsoft .Net Assembly is a logical unit of code, that contains code which the Common Language Runtime (CLR) executes. It is the smallest unit of deployment of a .net application and it can be a .dll or an exe . 

Assembly is really a collection of types and resource information that are built to work together and form a logical unit of functionality. 

It include both executable application files that you can run directly from Windows without the need for any other programs (.exe files), and libraries (.dll files) for use by other applications.

Assemblies are the building blocks of .NET Framework applications. During the compile time Metadata is created with Microsoft Intermediate Language (MSIL) and stored in a file called Assembly Manifest . 

Both Metadata and Microsoft Intermediate Language (MSIL) together wrapped in a Portable Executable (PE) file. 

Assembly Manifest contains information about itself. This information is called Assembly Manifest, it contains information about the members, types, references and all the other data that the runtime needs for execution.

Every Assembly you create contains one or more program files and a Manifest. There are two types program files : Process Assemblies (EXE) and Library Assemblies (DLL). 

Each Assembly can have only one entry point (that is, DllMain, WinMain, or Main).
We can create two types of Assembly:
1. Private Assembly 
2. Shared Assembly 


