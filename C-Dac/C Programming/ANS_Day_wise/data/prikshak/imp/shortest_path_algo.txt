Rain strikes and the roads are flooded, Mr X has to get home from work. Your task is to make sure he returns home in the shortest time.
Consider the roads as a graph with crossings as nodes, and the path between two nodes as an edge. Assume the graph is undirected and the nodes are numbered, 1 to V (V <= 50).
 




#include <iostream>

using namespace std;
int count = 0;
int height;
class Graph{
	private:
		int graph[50][50];
		string names[50];
		bool visited[50];
        int* arr;
        int vertex;
        int edges;
        int pred[50];
        int dist[50];
	
	public:
		Graph(){ }
        Graph(int vertex,int edges) {
            this->vertex = vertex;
            this->edges = edges;
            arr = new int[edges * 3];
        }
        
        int map(string name){
			for( int i = 0; i < 50; i++){
				if( names[i].length() == 0){
					names[i] = name;
					return i;
				}else if( names[i] == name)
					return i;
			}
			return -1;		
		}
        
        void input(){
			int time,index1,index2;
			string road1,road2;
            int depth;
			for(int i = 0;i < edges;i++) {
				cin>> road1;
				index1 = map(road1);
				cin>>road2;					
			    index2 = map(road2);
                cin>>time;
                graph[index1][index2] = time;
                graph[index2][index1] = time;
                cin>>depth;
                arr[count++] = map(road1);
                arr[count++] = map(road2);
                arr[count++] = depth;
				}
			}
            /*
		void print(){
			for(int i = 0; i < vertex; i++){
				for(int j = 0; j < vertex; j++){
					cout<<graph[i][j]<<" ";
				}
				cout<<endl;
			}
            int flag = 0;
        for(int i = 0;i < count;i++) {
            cout<<arr[i]<<" ";
            flag++;
             if(flag == 3) {
                    cout<<endl;
                    flag = 0;
            }       
        }
    }
    */
	    bool allvisited(){
			for(int i =0; i < vertex; i++)
				if( !visited[i] )
					return false;
		return true;
		}
		
        int notVisitedSmallest(){
			int smallest  = 99999;
			int index = -1;
			for(int i = 0; i < vertex; i++){
				if( !visited[i] ){
					if( dist[i] < smallest){
						smallest = dist[i];
						index = i;
					}	
				}
			}
		return index;
		}
		
		void dijkstra(string name){
		    int d;
			for(int i = 0; i < vertex; i++ ) {
				dist[i] = 99999;
                visited[i] = false;
			}
			dist[ map(name) ] = 0;
			pred[ map(name) ] = -1;

			while( ! allvisited() ){
				int n = notVisitedSmallest();	
				visited[n] = true;
				for(int i = 0; i < vertex; i++){
					if( graph[n][i] != 0 )
					if( dist[i] > dist[n] + graph[n][i]){
                            for(int k = 0;k < count;k = k + 3)
                                if((arr[k] == n && arr[k+1] == i) || (arr[k] == i && arr[k+1] == n))
                                    d = arr[k + 2];
                                    if(d < height) {
				   	                    dist[i] = dist[n] + graph[n][i];
					                    pred[i] = n;
                                    }
					}
				}
			}
		}
        
        void printpath(string from, string to){

			int toindex = map(to);
			string path = "";
			cout<<names[map(from)]<<" ";
			while( pred[toindex] !=  -1){
				if(path.length() == 0)
			       		path = names[toindex];
				else
			       		path = names[toindex]+" "+path ;
				
			       toindex = pred[toindex];		
			}	
			cout<<path<<" "<<endl;
		}
        
};
	int main(){
        
	int H,E,V;
    cin>>H>>E>>V;
    height = H;
	string s,e;
    Graph graph(V,E);
	graph.input();
	//graph.print();
    cin>>s;
    graph.dijkstra(s);
    cin>>e;
    graph.printpath(s,e);
	return 0;
}