An educational institute has ordered it’s courses according to some criteria. The ordering tells a student which all courses are the pre-requisites for a particular course. An ordering is said to be consistent only if there are no cyclic dependencies in it.
You are supposed to write a program that will take an ordering as input and find out whether or not it is consistent.
Assume that the course names will be less than 10 characters in length and that the maximum number of courses will be 50.
 



#include <iostream>

using namespace std;
int vertex;
class Graph{
	private:
		
		int graph[50][50];
		string names[50];
		bool visited[50];
		int dis[50];
		int pred[50];
	public:
		Graph(){ }
		

		int getIndex(string name){
			for( int i = 0; i < 50; i++){
				if( names[i].length() == 0){
					names[i] = name;
					return i;
				}else if( names[i] == name)
					return i;
			}
			return -1;		
		}

		void input(){
			int N,no,index,index1;
			cin>>N;
			string course,preq;
			for(int i = 0;i < N;i++) {
				cin>> course;
				index = getIndex(course);
				cin>>no;
				for(int j = 0;j < no;j++) {
					cin>>preq;					
					index1 = getIndex(preq);
                    graph[index][index1] = 1;
				}
			}
			vertex = 0;
			while(names[vertex].length() != 0) {
				vertex++;			
			}
			
		}
        
		bool dfs(int i){
			visited[i] = true;
		//	cout<<names[i]<<" ";
			for(int j = 0; j < vertex; j++){
				if( graph[i][j] > 0 ){
					if( visited[j] == true){
						return true;
					}else{
						if( dfs(j) )
							return true;
					}
				}
			}
			visited[i] = false;
			return false;
		}
        
			void cycle(){
                int flag = 0;
		    for(int i = 0;i < vertex;i++) {
    	        visited[i] = false;   
		    }
			for(int i = 0; i < vertex; i++){
				if( visited[i] == false)
					if( dfs(i) ){
						cout<<"NO"<<endl;
						break;
					}else{
					flag++;
					}
			}
            if(flag == vertex)
                cout<<"YES"<<endl;
			cout<<endl;	
		}	
};

int main(){
	
	Graph graph;
	graph.input();
    graph.cycle();
	return 0;
}