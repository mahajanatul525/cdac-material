The problem involves inserting into and maintaining a heap.
To start with, you will be given a set of numbers that you insert, as they come in, into an array. This will be the initial heap (the numbers will be ordered in such a manner that they ensure the "heapness" of the array).
Now, you will be given another set of numbers that you have to insert into the heap. After EACH insertion, you have to ensure the "heapness" of the array, as per the algorithm discussed in the class.



#include<iostream>

using namespace std;

int main() {

    int N,i,j,k = 0,M,nochange = 0,count = 0,no1,no2,no3,flag = 0,ele;
    cin>>N;
	int heap[60];
	for(i = 0;i < N;i++) {
		cin>>heap[i];
	}
  	cin>>M;
  		while(count != M) {
			nochange = 0;
			count++;
			cin>>heap[i++];
  			while(nochange == 0) {
				flag = 0;
				for(j = 0;j <= (N + count);j++) {
					no1 = heap[j];
  					no2 = heap[(2*j) + 1];
  					no3 = heap[(2*j) + 2];
                     if((2 * j) + 1 >=(N + count)) {
                         no2 = -100;
                     }
                    if((2*j) + 2 >= (N + count))
                    no3 = -100;
  					 if(no2 > no1 && no2 > no3) {
						heap[j] = no2;
						heap[(2 * j) + 1] = no1;
						flag = 1;
					}
					else  if(no3 > no1 && no3 > no2) {
						heap[j] = no3;
						heap[(2 * j) + 2] = no1;
						flag = 1;
					}
				}
				if(flag == 0) {
					nochange = 1;
				}
			}
  		}
  	cin>>ele;
 	for(j = ele;j<(N + M);j++) {
		cout<<heap[ele]<<" ";
		ele = (ele * 2) + 1;
		if(ele>=(N + M)) 
			break;
	}
				
return 0;
}