In C#, two or more methods within the same class can share the same name, as long as their parameter declarations are different. 

When this is the case, the methods are said to
be overloaded, and the process is referred to as method overloading. 

Method overloading is one of the ways that C# implements polymorphism.

In general, to overload a method, simply declare different versions of it. 

The compiler takes care of the rest.

You must observe one important restriction: 

The type and/or number of the parameters of each overloaded method must differ.

 It is not sufficient for two methods to differ only in their       return types. They must differ in the types or number of their parameters






As you can see, OvlDemo( ) is overloaded four times. The first version takes no parameters;
the second takes one integer parameter; the third takes two integer parameters; and the

fourth takes two double parameters. Notice that the first two versions of OvlDemo( ) return void and the second two return a value. This is perfectly valid,


 but as explained, overloading
is not affected one way or the other by the return type of a method. 

Thus, attempting to use
these two versions of OvlDemo( ) will cause an error:

// One OvlDemo(int) is OK.
public void OvlDemo(int a) {
Console.WriteLine("One parameter: " + a);
}
/* Error! Two OvlDemo(int)s are not OK even though
return types differ. */

public int OvlDemo(int a) {
     Console.WriteLine("One parameter: " + a);
return a * a;
}





