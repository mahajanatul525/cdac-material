Microsoft has introduced a new set of libraries, diagnostic tools and  runtime in .NET Framework 4.0 to enhance support for parallel computing. 

The main objective of these features is to simplify parallel development, 
i.e., writing parallel code in a natural idiom without having to work directly with threads.

 These include 

Task Parallel Library (TPL),
Parallel LINQ, and 
new data structures.

The Task Parallel Library (TPL) is based on the concept of a task, which represents an asynchronous operation. In some ways, a task resembles a thread or ThreadPool work item, but at a higher level of abstraction. The term task parallelism refers to one or more independent tasks running concurrently. Tasks provide two primary benefits: 

    More efficient and more scalable use of system resources.

    Behind the scenes, tasks are queued to the ThreadPool, which has been enhanced with algorithms that determine and adjust to the number of threads and that provide load balancing to maximize throughput. This makes tasks relatively lightweight, and you can create many of them to enable fine-grained parallelism.

    More programmatic control than is possible with a thread or work item.

    Tasks and the framework built around them provide a rich set of APIs that support waiting, cancellation, continuations, robust exception handling, detailed status, custom scheduling, and more.