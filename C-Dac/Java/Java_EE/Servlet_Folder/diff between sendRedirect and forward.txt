the difference between the two is that sendRedirect always sends a header back to the client/browser.
 this header then contains the resource(page/servlet) which u wanted to be redirected. the browser uses this header to make
 another fresh request. thus sendRedirect has a overhead as to the extra remote trip being incurred. its like any other Http 
request being generated by ur browser. the advantage is that u can point to any resource(whether on the same domain or some other
 domain). for eg if sendRedirect was called at www.mydomain.com then it can also be used to redirect a call to a resource on www.
theserverside.com. 

where as in case of forward() call, the above is not true. resources from the server, where the fwd. call was made, 
can only be requested for. but the major diff between the two is that forward just routes the request to the new resources which
 u specify in ur forward call. that means this route is made by the servlet engine at the server level only. no headers r sent to 
the browser which makes this very efficient. also the request and response objects remain the same both from where the forward call
 was made and the resource which was called. 


Another difference is in response.sendRedirect() you need to give absolute path of the url and also request and response objects
 will be passed automatically to the new page. But in the case of forward method, you need to explicitly send the request and
 response objects to the new page. 




Using a Redirect

When a sendRedirect() method is invoked,it causes the web container to return to the browser a response indicating that a new URL
 should be requested.Because the browser issues a completely new request,any objects that are stored as request attributes before 
the redirect occurs will be lost.This is one of the biggest difference between a forward and redirect.

Because of the extra round trip that occurs,a redirect is slower than a forward.