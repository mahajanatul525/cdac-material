/*

computeIfAbsent:

If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.

*/

import java.util.HashMap;
import java.util.Map;
public class Demo1
{
	public static void main(String ...arg)
	{
		Map<Integer, String> map = new HashMap<>();

		for (int i = 0; i < 10; i++) {
		    map.putIfAbsent(i, "val" + i);
		}
	
		
		map.forEach((id, val) -> System.out.println(val));

		map.computeIfPresent(3, (num, val) -> val + num);
		System.out.println(map.get(3));             // val33

		

		map.computeIfAbsent(23, num -> "val" + num);
		System.out.println(map.containsKey(23));    // true

		map.computeIfAbsent(3, num -> "welcome");
		System.out.println(map.get(3));             // val33

System.out.println("Displaying map");

		System.out.println(map);
		map.replace(3, null);
		System.out.println(map);
		map.computeIfAbsent(3, num -> "hello");
		System.out.println(map);

	}
}


/*

output:


val0
val1
val2
val3
val4
val5
val6
val7
val8
val9
val33
true
val33
Displaying map
{0=val0, 1=val1, 2=val2, 3=val33, 4=val4, 5=val5, 6=val6, 23=val23, 7=val7, 8=val8, 9=val9}
{0=val0, 1=val1, 2=val2, 3=null, 4=val4, 5=val5, 6=val6, 23=val23, 7=val7, 8=val8, 9=val9}
{0=val0, 1=val1, 2=val2, 3=hello, 4=val4, 5=val5, 6=val6, 23=val23, 7=val7, 8=val8, 9=val9}


*/
